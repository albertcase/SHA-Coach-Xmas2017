if ('addEventListener' in document) {
    document.addEventListener('DOMContentLoaded', function() {
        FastClick.attach(document.body);
    }, false);
}

;(function(w){

	function Animator(duration, update, easing){
	    this.duration = duration;
	    this.update = update;
	    this.easing = easing;
	}

	Animator.prototype = {
	    /**
	     * @param options = {begin, update, end}
	     */
	     req: null,
	     start: function(options){
	        options = options || {};

	        var startTime = Date.now(),
	            duration = this.duration,
	            update = this.update,
	            easing = this.easing,
	            begin = options.begin,
	            end = options.end,
	            self = this;

	        if(begin){
	            begin.call(this);
	        }

	        function step(){
	            var p = (Date.now() - startTime) / duration;

	            if(p < 1.0){
	                update.call(self, easing ? easing(p) : p, p);
	                self.req = requestAnimationFrame(step);
	            }else{
	                var loop = false;

	                if(typeof end === 'function'){
	                    loop = end.call(self) === false;  // loop if end return false
	                }else{
	                    loop = end === false;  // shorthand for end: function(){return false}
	                }


	                if(!loop){
	                    update.call(self, easing ? easing(1.0) : 1.0, 1.0)
	                }else{
	                    p -= 1.0;
	                    startTime += duration;
	                    step(easing ? easing(p) : p, p)
	                }
	            }
	        }
	        self.req = requestAnimationFrame(step);
	     },
	     pause: function(){
	        window.cancelAnimationFrame(this.req); 
	     }
	}



	function AnimationQueue(animators){
	    this.animators = animators || [];
	}

	AnimationQueue.prototype = {
	    append: function(){
	        var args = [].slice.call(arguments);
	        this.animators.push.apply(this.animators, args);
	    },
	    flush: function(){
	        if(this.animators.length){
	            var self = this;

	            function play(){
	                var animator = self.animators.shift();

	                if(animator instanceof Animator){
	                    animator.start({
	                        end: function(){
	                            if(self.animators.length){
	                                play();
	                            }
	                        }
	                    })
	                }else{ // if not animator, just call it
	                    animator.call(self);
	                    if(self.animators.length){
	                        play();
	                    }
	                }
	 
	            }
	            play();
	        }
	    }
	}

	w.AnimationQueue = AnimationQueue;
	w.Animator = Animator;

})(window)

// you
;(function(w){
	function Hero(){
		this.el = null;
		this.width = null;
		this.height = null;
		this.x = 0;
		this.y = 62;
		this.latex = 0;
		this.latey = 0;
		this.parentEl = document.getElementById('scene');
		this.speed = 20;
		this.keyCode = ['37', '38', '39', '40', '32'];
		this.animators = new AnimationQueue();
		this.status = 'paused';
		this.jump = {
			'count': 0,
			'first': 0,
			'end': 0
		};
		//this.star = null;
		this.common = new Common();
		this.elClassName = null;

		this.isEat = 0;

		this.waitStatus = 0;    // 碰撞之后等待计算时间设定
	}

	Hero.prototype = {
		init: function(){
			this.create();
			this.render();
			this.el.style.cssText = 'left: '+ this.x +'px; top: '+ this.y +'%';
			this.bind();
		},
		render: function(){
			var scenew = parseInt(w.getComputedStyle(this.parentEl).width, 10);
			this.el = document.getElementById('hero');
			this.x = Math.floor(scenew * 0.2);
			//this.star = star;
			this.width = parseInt(w.getComputedStyle(this.el).width, 10);
			this.height = parseInt(w.getComputedStyle(this.el).height, 10);
			// console.log(this.width, this.height);
		},
		create: function(){
			var el = document.createElement('div');
				el.id = 'hero';
				el.className = 'hero ' + this.elClassName;
			this.parentEl.appendChild(el);
		},
		left: function(){
			this.latex -= this.speed;
			this.update();
		},
		right: function(){
			this.latex += this.speed;
			this.update();
		},
		update: function(){
			this.el.style.transform = 'translate('+ this.latex +'px, ' + this.latey + 'px)';
		},
		anim: function(){
			if(this.status === 'play' || this.waitStatus) return;
			this.status = 'play';
			magicFun.paused = 0;
			var me = this;
			barriers.speed = 8;
			var a1 = new Animator(300, function(p){
			    var tx = 170 - 170 * (1-p);
			    me.latey = -tx;
			    // me.latex = -tx;;
			    me.update();
			})

			var a2 = new Animator(500, function(p){
			    var tx = -170 * (1-p);
			    me.latey = tx;
			    me.update();
			})


			me.animators.append(a1, a2, function repeat(){
		        // console.log('complate!');
		        me.status = 'paused';
		        me.isEat = 0;
		        barriers.speed = 6;
		    });
		    me.animators.flush();
		},
		jumpMobile: function(gammaValue){    // 跳的方法

			var me = this;
			me.jump.count++;


			if(me.jump.count == 2){
				me.jump.first = gammaValue;
			}
			
			if(me.jump.count >= 5){
				me.jump.end = gammaValue;
				
				// (first > end)   // 向下翻
				// (end > first)   // 向上翻
				// 取值区间 10 (灵敏度)
				if(me.jump.first > me.jump.end && (me.jump.first - me.jump.end) > 5){
					hero.anim();
				}
				me.jump.count = 0;
				me.jump.first = 0;
				me.jump.end = 0;
			}



			// if(me.jump.count == 1){
			// 	me.jump.first = b;
			// }
			// if(me.jump.count == 27){

			// 	// 元素的状态是否动画中状态，计算间隔时间     // && (me.jump.first > me.jump.end)
			// 	if(hero.status === 'paused' && me.jump.first > 0 && (me.jump.first - me.jump.end) > 5){
			// 		hero.anim();
			// 	};

			// 	me.jump.end = b;
			// 	me.jump.count = 0;
			// }
			
		},
		handleOrientation: function(orientData){
			var me = this;
			var absolute = orientData.absolute;
			var alpha = orientData.alpha;
			var beta = orientData.beta;
			var gamma = Math.floor(orientData.gamma);
				me.jumpMobile(Math.abs(gamma));
		},
		bind: function(){
			var me = this;
			// PC 跳跃事件
			// document.onkeyup = function(evt){
			// 	// if(hero.status === 'play') return;

			//     evt = (evt) ? evt : w.event;
			//     if (evt.keyCode) {
			        
			// 	    if(evt.keyCode == me.keyCode['0']){
			// 	       if(magicFun.paused)return;
			// 	       me.left();
			// 	       console.log('左')
			// 	    }else if(evt.keyCode == me.keyCode['2']){
			// 	       if(magicFun.paused)return;
			// 	   	   console.log('右')
			// 	   	   me.right();
			// 	    }else if(evt.keyCode == me.keyCode['3']){
			// 	   	   console.log('下')
			// 	    }else if(evt.keyCode == me.keyCode['1'] || evt.keyCode == me.keyCode['4']){
			//     		me.anim();
			// 	    }else{

			// 	    }
			// 	}
			// }



			// MOBILE 跳跃事件
			w.addEventListener("deviceorientation", me.handleOrientation.bind(me), true);

		},
		exit: function(){
			this.el.className += ' mvExit';
		},
		waitAnimate: function(){
			var a = 0.2, me = this;
			me.waitStatus = 1;
			function setSta(){	
				if(a >= 0.9){
					me.waitStatus = 0;
					clearTimeout(setIntervalTime);
					me.el.className += ' shake';
				}else{
					a += 0.1;
				}
				var jsA = parseFloat(a).toFixed(1),
					ml = -10 + jsA * 10;
				me.el.style.opacity = jsA;

				me.el.style.transform = 'translateX('+ ml +'px)';
			}
			var setIntervalTime = setInterval(function(){
				setSta();
			}, 60);
		}
	}

	w.hero = new Hero();
})(window);


// w.addEventListener("deviceorientation", handleOrientation, true);
// var timeA = 0,
// 	nowB = 0;;
// function handleOrientation(orientData){
// 	nowB = new Date().getTime();
// 	document.getElementById('result').innerHTML = (nowB - timeA);
// 	if((nowB - timeA) > 1000){

// 		timeA = nowB;

// 		var absolute = orientData.absolute;
// 		var alpha = orientData.alpha;
// 		var beta = orientData.beta;
// 		var gamma = Math.floor(orientData.gamma);
// 		//document.getElementById('result').innerHTML =  (nowB - timeA) + ':' +gamma;
// 	};
	
// 	// if(hero.status === 'paused' && (gamma > 5 && gamma < 18)){
// 	// 	hero.anim();
// 	// };
// }

// 障碍物
;(function(w){

	var barriersData = [
		{
			key: 1,
			style: 'style1'
		},{
			key: 80,
			style: 'style2'
		},{
			key: 190,
			style: 'style3'
		},{
			key: 270,
			style: 'style1'
		},{
			key: 320,
			style: 'style2'
		},{
			key: 450,
			style: 'style1'
		},{
			key: 500,
			style: 'style3'
		}
	];

	// 障碍物
	function Barriers(){
		this.parentEl = document.getElementById('scene');
		this.cname = 'style1';
		this.x = 0;
		this.y = 59;
		this.width = null;
		this.height = null;
		this.elements = [];
		this.speed = 6;
		this.hero = null;
	}

	Barriers.prototype.init = function(){ // 创建元素
		this.render();
		var el = document.createElement('div');
			el.className = 'coachPro ' + this.cname;
			el.style.cssText = 'left: '+ this.x +'px; top: '+ this.y +'%';
			this.parentEl.appendChild(el);
			this.width = parseInt(w.getComputedStyle(el).width, 10);
			this.height = parseInt(w.getComputedStyle(el).height, 10);
		return el;
	}
	Barriers.prototype.render = function(){
		this.x = parseInt(w.getComputedStyle(this.parentEl).width, 10);
		this.hero = hero;
	}
	Barriers.prototype.doing = function(countInit){
		var creatEle = null, me = this;

		//for(let i = 0; i < barriersData.length; i++){
			// if(countInit === barriersData[i].key){
			// 	creatEle = me.init();
			// }
			if(countInit%80 === 0){
				creatEle = me.init();
			}
		//}

		if(creatEle){
			me.elements.push(creatEle);
		}

		for(var i = 0; i < me.elements.length; i++){
			me.update(me.elements[i], i);
		}
	}
	Barriers.prototype.update = function(el, key){  // 更新元素位置
		var elLeft = parseInt(el.style.left, 10) - this.speed,
			me = this;
		var pos = {
			x: me.hero.latex + me.hero.x,  // 250
			y: me.hero.latey * -1,       // -0
			heroWidth: Math.floor(me.hero.width * 0.8)
		}

		if(elLeft > (pos.x - pos.heroWidth * 0.6) && elLeft < (pos.x + pos.heroWidth) && me.hero.status === 'paused'){
			me.hero.waitAnimate();
			magicFun.paused = 1;
			elLeft = (pos.x + pos.heroWidth);
			me.hero.el.style.opacity = 0.2;
			me.hero.el.style.transform = 'translateX(-10px)';
		}else{
			me.hero.el.className = me.hero.el.className.replace(' shake', '');
		}


		if(elLeft < -pos.heroWidth){
			el.style.opacity = 0.1;
			el.remove();
			me.elements.splice(key, 1);
			elLeft = null;
		}

		el.style.left = elLeft + 'px';
		
	}

	w.barriers = new Barriers();
	// .doing()

})(window)


;(function(w){

	var elementsDataJson = [
		{
			'className': ['el-4', 'el-5', 'el-6', 'el-3', 'el-1', 'el-2'],
			'rate': ['0', '90', '80', '180', '50', '100', '167']
		},
		{
			'className': ['el2-1', 'el2-2', 'el2-3', 'el2-4', 'el2-5', 'el2-6'],
			'rate': ['0', '100', '100', '180', '50', '90', '127'],
		},
		{
			'className': ['el3-1', 'el3-2', 'el3-3', 'el3-4', 'el3-5', 'el3-6'],
			'rate': ['0', '90', '80', '150', '180', '50', '167']
		},
		{
			'className': ['el4-1', 'el4-2', 'el4-3', 'el4-4', 'el4-5', 'el4-6'],
			'rate': ['0', '90', '80', '180', '90', '60', '167']
		}
	]

	// 类;
	function Money(x, speed, cn){
		// 没次循环增加的像素数
		this.speed = (speed === 0 ? 6 : speed);
		this.x = x;
		this.className = cn;
	}

	Money.prototype = {
		draw:function(parentEl){
			var el = document.createElement('div');
			el.className = 'el ' + this.className;
			el.style.left = this.x + 'px';
			// el.innerHTML = v;
			parentEl.appendChild(el);
		},
		move:function(){
			this.x += this.speed;
		}
	}


	var elements_obj = {
		scene: document.getElementById('scene'),
		sceneWidth: 0,
		sceneHeight: 0,
		timer: null,
		count: 0,
		elements: [],
		parentEl: document.querySelector('.element'),
		abc: 0,
		elDataArrayIndex: 0,
		elDataArray: null,
		speed: 1,
		setTime: 5,
		waitCount: 0,
		initX: -160,
		init: function(){
			this.render();
		},
		render: function(){
			this.sceneWidth = parseInt(w.getComputedStyle(this.scene).width, 10);
			this.sceneHeight = parseInt(w.getComputedStyle(this.scene).height, 10);
			this.update();
		},
		update: function(){
			var me = this;
			me.timer = setInterval(me.loop, me.setTime);
		},
		paused: function(){
			var me = this;
			clearInterval(me.timer);
			me.timer = null;
		},
		draw: function(){
			var me = elements_obj;
			me.parentEl.innerHTML = '';
			for(var i=0;i<me.elements.length;i++){
				var o = me.elements[i];

				// 清理屏幕外的对象
				if(o.x > me.sceneWidth + 180 || o.x < -180){
					me.elements.splice(i,1);
				}else{
					o.draw(me.parentEl);
				}
			}
		},
		loop: function(){
			var me = elements_obj;
			if(magicFun.paused) return false;   // 碰到障碍物暂停元素
			me.elDataArray = elementsDataJson[me.elDataArrayIndex];
			
			var x = me.initX;
			var rate = (!me.elDataArray['rate'][me.abc] ? 15 : me.elDataArray['rate'][me.abc]);
			// 1/10的对象添加概率

			me.wait(rate, function(){
				if(me.abc > 6){
					me.abc = 0;
					me.count = 0;
				}
				var money = new Money(x, me.speed, me.elDataArray['className'][me.abc]);

				me.elements.push(money);

				me.abc ++;

			});

			for(var i = 0; i < me.elements.length; i++){
				me.elements[i].move();
			}
			
			me.draw();
			
			me.count ++;
		},
		wait: function(v, callback){
			var me = this;
			me.waitCount++;
			if(me.waitCount >= v){
				me.waitCount = 0;
				callback();
			}
		}
	}


	w.elementsObj = elements_obj;
	// 暂停 paused
	// 更新 update


})(window)

// 星星star
;(function(w){


	var starData = [
		{
			key: 2,
			style: ''
		},{
			key: 56,
			style: 'style2'
		},{
			key: 150,
			style: 'style3'
		},{
			key: 220,
			style: ''
		},{
			key: 300,
			style: 'style2'
		},{
			key: 410,
			style: 'style1'
		},{
			key: 500,
			style: 'style3'
		}
	];


	function Star(){
		this.parentEl = document.getElementById('scene');
		this.cname = 'style1';
		this.x = 0;
		this.y = 38;
		this.width = 0;
		this.height = 0;
		this.elements = [];
		this.speed = 4;
		// this.isEat = 0;
		// this.c = '';
		//this.writeArr = [];
		this.eatScores = []; //吃掉的心的data-id 
		this.hero = null;

		this.heroId = 0;
		this.eatMusic = null;

		this.enterSpace = 0;
	}

	Star.prototype.init = function(){ // 创建元素
		this.render();
		var el = document.createElement('div');
			el.className = 'heart ' + this.cname;
			el.style.cssText = 'left: '+ this.x +'px; top: ' + this.y +'%;'
			el.setAttribute('data-id', this.heroId);
			// el.innerHTML = this.heroId;
			this.parentEl.appendChild(el);
			this.width = parseInt(w.getComputedStyle(el).width, 10);
			this.height = parseInt(w.getComputedStyle(el).height, 10);

		return el;
	}
	Star.prototype.render = function(){
		this.eatMusic = document.getElementById('eatMusic');
		this.x = parseInt(w.getComputedStyle(this.parentEl).width, 10);
		this.hero = hero;
	}
	Star.prototype.doing = function(count){
		var creatEle = null, me = this;
		//if(me.writeArr.indexOf(count) < 0) {
			//me.writeArr.push(count);
			var random = Math.floor(Math.random() * 100);
			// for(let i = 0; i < starData.length; i++){
			// 	// if(count === starData[i].key){
			// 	// 	creatEle = me.init(starData[i].style);
			// 	// }
			// 	//console.log(random % 100, me.elements.length);
			// 	if(count % 100 === 0 || random % 100 === 0){
			// 		if(me.elements.length <= 3){
			// 			creatEle = me.init(starData[i].style);
			// 		}
			// 	}
			// }
			me.enterSpace++;
			if(count % 100 === 0 || (random % 50 === 0)){
				if(me.elements.length <= 3 && me.enterSpace >= 12){
					me.enterSpace = 0;
					me.heroId++;
					creatEle = me.init(starData[0].style);
				}
			}
		//};
		
		if(creatEle){
			me.elements.push(creatEle);
		}

		for(var i = 0; i < me.elements.length; i++){
			me.update(me.elements[i], i);
		}

	}
	Star.prototype.update = function(el, key){  // 更新元素位置

		var elLeft = parseInt(el.style.left, 10) - this.speed,
			elTop = parseInt(el.style.top, 10),
			me = this;

		var pos = {
			x: me.hero.latex + me.hero.x,  // 250
			y: me.hero.latey * -1,       // -0
			heroWidth: Math.floor(me.hero.width * 0.6)
		}
		if(elLeft > pos.x && elLeft < (pos.x + pos.heroWidth) && (me.hero.y - pos.y) < me.y){
			var gid = el.getAttribute('data-id');
			if(me.eatScores.indexOf(gid) < 0){  // 是否吃到心
				me.eatScores.push(el.getAttribute('data-id'));

				me.eatMusic.currentTime = 0;
				me.eatMusic.play();
			};
			
			//if(!me.hero.isEat){
				// me.eatMusic.play();
				// Eatmusic();
			// 	me.eatScores++;
			// 	console.log(me.eatScores);
			//};
			me.hero.isEat = 1;
			el.style.opacity = 0.1;
			el.remove();
			elLeft = null;
		}

		if(elLeft < -pos.heroWidth){
			el.remove();
			me.elements.splice(key, 1);
			elLeft = null;
		}

		el.style.left = elLeft + 'px';
	}


	window.star = new Star();
	// star.doing()

})(window)
;(function(w){
	function Bgmusic(){
		if(!(this instanceof Bgmusic)){
            var self = new Bgmusic();
            self.init();
            return self;
        };
		this.el = null;
		this.init = function(){
			this.create();
		}
		this.create = function(){
			var em = document.createElement('audio');
			em.src = '/build/dist/media/coachxmas.m4a';
			em.loop = true;
			em.preload = 'auto';
			em.innerHTML = '您的浏览器不支持 audio 标签。';
			this.el = em;
			document.body.appendChild(em);
		}
		this.play = function(){
			this.el.play();
		}
		this.pause = function(){
			this.el.pause();
		}
	}

	var bgMusic = Bgmusic();



	// 总共用时
	function TimeCount(el){
		return {
			data: {
				'el': document.querySelector(el),
				'timer': null,
				'count': 0,
				'minutes': 0,
				'second': 0
			},
			init: function(){
				this.update();
			},
			update: function(){
				var me = this;
				me.data.minutes = me.data.count % 60 + '';
				me.data.second = Math.floor(me.data.count / 60) + '';
				me.data.el.innerHTML = `
					<div class="timePos n${me.data.second < 10 ? '0' : me.data.second[0]}"></div>
	                <div class="timePos n${me.data.second < 10 ? me.data.second : me.data.second[1]}"></div>
	                <div class="timePos n10"></div>
	                <div class="timePos n${me.data.minutes < 10 ? '0' : me.data.minutes[0]}"></div>
	                <div class="timePos n${me.data.minutes < 10 ? me.data.minutes : me.data.minutes[1]}"></div>
				`;
				me.data.count++;
			},
			start: function(){
				var me = this;
				me.data.timer = setInterval(function(){
					me.update();
				}, 1000);
			},
			paused: function(){
				clearInterval(this.data.timer);
			},
			getTime: function(){
				return {
					'second': this.data.second < 10 ? '0' + this.data.second : this.data.second,
					'minutes': this.data.minutes < 10 ? '0' + this.data.minutes : this.data.minutes
				}
			}
		};
	}
	var timeCount = new TimeCount('.timeArea');


	function MagicFun(){
		this.timer = null;         // 定时器
		this.paused = 0;           // 全局状态
		this.countInit = 0;
		this.sceneHover = null;
		this.common = new Common();
		this.status = 0;
	}

	MagicFun.prototype.init = function(){
		this.sceneHover = document.querySelector('.scene-bg.hover');
		this.open();
		timeCount.start();
	}

	MagicFun.prototype.open = function(){
		var me = this;
		if(!me.paused) {
			me.update();
		}
		if(this.status){
			window.cancelAnimationFrame(me.timer); 
			me.timer = null;
		}else{
			me.timer = w.requestAnimationFrame(me.open.bind(me)); 
			var ikonwBtnEl = document.querySelector('.iknow-btn');
			ikonwBtnEl.className = ikonwBtnEl.className.replace(' disabled', '');
		}
		
	}

	MagicFun.prototype.update = function(){
		var me = this;
		var countInit = me.countInit;
		switch(countInit){
			case 2: 
				me.sceneBgChange('.scene1', 0, 'style1');
			break;
			case 500:
				me.sceneBgChange('.scene2', 1, 'style2');
			break;
			case 1000:
				me.sceneBgChange('.scene3', 2, 'style3');
			break;
			case 1500:
				me.sceneBgChange('.scene4', 3, 'style4');
			break;
			case 2000:
				me.status = 1;
				w.removeEventListener('deviceorientation', function(){}, true);
				document.onkeyup = function(evt){}
				elementsObj.paused();
				timeCount.paused();
			    me.countInit = null;
			    me.count();
			default:
				
			break;

		}

		me.countInit ++;
		barriers.doing(countInit);
		star.doing(countInit);
	}


	MagicFun.prototype.cancelStatus = function(){
		w.cancelAnimationFrame(this.timer);
	}

	MagicFun.prototype.sceneBgChange = function(el, k, name){   // 场景背景更换
		var me = this;
		/* Use a custom bezier curve. */
		elementsObj.elDataArrayIndex = k;
		barriers.cname = name;

		var container = document.querySelector(el);
		$(container).transition({
		  opacity: 1,
		  duration: 500,
		  easing: ['cubic-bezier(.42,0,1,1)'],
		  complete: function() {
		  	$(this).addClass('hover');

		  	$(me.sceneHover).transition({
			  opacity: 0,
			  duration: 100,
			  easing: 'out',
			  complete: function() { 
			  	$(this).removeClass('hover');
			  }
			});

		  }
		});
	}




	MagicFun.prototype.count = function(){
		var me = this;
		bgMusic.pause();
		var time = timeCount.getTime();
		var scores = star.eatScores.unique();
		hero.exit();

		document.getElementById('hero').addEventListener("webkitAnimationEnd", function (e) {
			var loading = document.querySelector('.loading');
			loading.className = 'loading';
			loading.style.visibility = 'visible';
			loading.querySelector('p').innerHTML = '目前涌入的小伙伴过多<br>成绩正在计算中，请耐心等待。';


			// me.common.PageRouter('scores');
			// loading.className = 'loading hidden';

			// 提交数据
			var countTime = Math.round(time.second * 60 + (time.minutes * 1) - scores.length * 0.5);
			var randomMillisecond = Math.floor(Math.random() * 1000);

			me.common.fetch.record({
		      'records': (countTime + '.' + randomMillisecond),  
			  'animal': hero.elClassName,
			  'bar': scores.length,
			  'timeinit': (time.second * 60 + time.minutes * 1)
		    }, function(data){
		    	if(data.status === 3){
		    		me.common.base.formErrorTips(data.msg);
		    	}
		    	document.querySelector('.heartCount').innerHTML = scores.length + ' 个';
				document.querySelector('.timeCount').innerHTML = Math.floor(countTime/60) + ' 分 ' + countTime%60 + ' 秒 ' + randomMillisecond;
				me.common.PageRouter('scores');
				loading.className = 'loading hidden';
				loading.style.visibility = 'hidden';
				loading.querySelector('p').innerHTML = '目前涌入的小伙伴过多<br>页面正在跳转中，请耐心等待。';

				// 重绘Share文案
    			shareData['_title'] = '酷玩圣诞，“礼”享不停！';
    			shareData['_desc'] = '这里有一份圣诞惊喜正在等你领取！';
    			shareData['_desc_friend'] = '这里有一份圣诞惊喜正在等你领取！';
				shareData['_link'] = data['share_url'];

				shareData['_shareAppMessageCallback'] = function(){
					me.common.PageRouter('share');
					shareTips.hide();
		        	_hmt.push(['_trackEvent', 'share', 'button', 'onMenuShareAppMessage - result']);
			    }
			    shareData['_shareTimelineCallback'] = function(){
			    	me.common.PageRouter('share');
			    	shareTips.hide();
			        _hmt.push(['_trackEvent', 'share', 'button', 'onMenuShareTimeline - result']);
			    }

			    me.common.base.wxshareFun();

				// console.log(shareData);

		    });
		});

	}





	
	// document.querySelector('.start').onclick = function(){
	// 	paused ? paused = 0 : paused = 1;
	// }

	var ikonwBtn = document.querySelector('.iknow-btn');
	w.magicFun = new MagicFun();

	ikonwBtn.addEventListener('click', function(){
		if(this.className.indexOf(' disabled') >= 0) return false;
		this.className += ' disabled';
		$('.gameTips').hide();
		bgMusic.play();

		elementsObj.init();

		timeCount.init();
		hero.init();
		barriers.init();
		star.init();

		magicFun.init();
	}, false)



})(window);

;(function(w){

	function ShareTips(el){
		return {
			init: function(){
				var me = this;
				me.render();
			},
			datas: {
				el: null,
				close: null
			},
			render: function(){
				var me = this;
				me.datas.el = $(el);
				me.datas.close = $(el).find('.close');
				me.bind();
			},
			bind: function(){
				var me = this;
				me.datas.close.on('click', function(){
					me.hide();
				})
			},
			show: function(){
				this.datas.el.removeClass('hidden');
			},
			hide: function(){
				this.datas.el.addClass('hidden');
			}
		}
	}

	// 分享提示层
	w.shareTips = new ShareTips('.shareTips');
	shareTips.init();

})(window)